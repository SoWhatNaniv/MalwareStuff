import os
import pefile

BASE_ADDRESS = 0x0041C9F8

INTERESTING_DLLS = [
    'kernel32.dll', 'comctl32.dll', 'advapi32.dll', 'comdlg32.dll',
    'gdi32.dll', 'msvcrt.dll', 'netapi32.dll', 'ntdll.dll',
    'ntoskrnl.exe', 'oleaut32.dll', 'psapi.dll', 'shell32.dll',
    'shlwapi.dll', 'srsvc.dll', 'urlmon.dll', 'user32.dll',
    'winhttp.dll', 'wininet.dll', 'ws2_32.dll', 'wship6.dll',
    'advpack.dll',
]

export_list = []

api_hashmap = {}


def create_api_hashmap():
    get_export_list()
    for export in export_list:
        api_hashmap[get_api_hash(export)] = export


def hash_lookup(api_hash):
    transformed_hash = transform_api_hash(api_hash)
    return api_hashmap.get(transformed_hash, "")


def get_export_list():
    for filename in os.listdir("C:\\Windows\\System32"):
        if filename.lower() in INTERESTING_DLLS:
            pe = pefile.PE("C:\\Windows\\System32\\" + filename)
            for exp in pe.DIRECTORY_ENTRY_EXPORT.symbols:
                try:
                    export_list.append(exp.name.decode('utf-8'))
                except:
                    continue


def transform_api_hash(api_hash):
    result = api_hash ^ ((api_hash ^ 0x76c7) << 16) ^ 0xafb9
    return result & 0x1fffff


def get_api_hash(function_name):
    result = 0x2b
    for c in function_name:
        result = ord(c) + 0x10f * result
    return result & 0x1fffff
    

create_api_hashmap() # Creating the hash map


# Resolving all of the dwords
for ptr in range(0, 0x230, 4):
    current_hash = int.from_bytes(get_bytes(ptr + BASE_ADDRESS, 4), "little") # Get Current Dword Hash
    current_func = hash_lookup(current_hash)
    idc.set_name(ptr + BASE_ADDRESS, current_func)

