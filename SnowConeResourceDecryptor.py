import argparse


def extract_resource(resource_file):
    with open(resource_file, "rb") as f:
        resource_data = f.read()
    return resource_data, len(resource_data)


def decrypt_resource(resource_data, resource_file_length, xor_key, xor_key_length):
    decrypted_data = []
    decryption_counter = 0
    while decryption_counter < resource_file_length:
        decrypted_data.append(resource_data[decryption_counter] ^ xor_key[(decryption_counter % xor_key_length)])
        decryption_counter += 1
    return decrypted_data


def write_file(decrypted_exe, file_output_path):
    with open(file_output_path + r"\malware.decrypted", "wb") as f:
        f.write(bytearray(decrypted_exe))


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--resource_file', type=str, required=True)
    parser.add_argument('--xor_key', type=str, required=True)
    parser.add_argument('--file_output_path', type=str, required=True)
    args = parser.parse_args()

    resource_file = args.resource_file
    xor_key = bytes(args.xor_key, 'utf-8') + b"\x00"  # Adding null terminator, being used as a xor key byte value
    xor_key_length = len(xor_key)
    file_output_path = args.file_output_path

    resource_data, resource_data_length = extract_resource(resource_file)
    decrypted_exe = decrypt_resource(resource_data, resource_data_length, xor_key, xor_key_length)

    write_file(decrypted_exe, file_output_path)


if __name__ == "__main__":
    main()
